/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as publicRoutesRouteRouteImport } from './routes/(public-routes)/route'
import { Route as privateRoutesRouteRouteImport } from './routes/(private-routes)/route'
import { Route as publicRoutesIndexRouteImport } from './routes/(public-routes)/index'
import { Route as privateRoutesCandidatesSearchRouteImport } from './routes/(private-routes)/candidates-search'
import { Route as privateRoutesProfileIndexRouteImport } from './routes/(private-routes)/profile/index'
import { Route as authRoutesAuthRegisterRouteImport } from './routes/(auth-routes)/auth/register'
import { Route as authRoutesAuthLoginRouteImport } from './routes/(auth-routes)/auth/login'

const publicRoutesRouteRoute = publicRoutesRouteRouteImport.update({
  id: '/(public-routes)',
  getParentRoute: () => rootRouteImport,
} as any)
const privateRoutesRouteRoute = privateRoutesRouteRouteImport.update({
  id: '/(private-routes)',
  getParentRoute: () => rootRouteImport,
} as any)
const publicRoutesIndexRoute = publicRoutesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicRoutesRouteRoute,
} as any)
const privateRoutesCandidatesSearchRoute =
  privateRoutesCandidatesSearchRouteImport.update({
    id: '/candidates-search',
    path: '/candidates-search',
    getParentRoute: () => privateRoutesRouteRoute,
  } as any)
const privateRoutesProfileIndexRoute =
  privateRoutesProfileIndexRouteImport.update({
    id: '/profile/',
    path: '/profile/',
    getParentRoute: () => privateRoutesRouteRoute,
  } as any)
const authRoutesAuthRegisterRoute = authRoutesAuthRegisterRouteImport.update({
  id: '/(auth-routes)/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const authRoutesAuthLoginRoute = authRoutesAuthLoginRouteImport.update({
  id: '/(auth-routes)/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof publicRoutesIndexRoute
  '/candidates-search': typeof privateRoutesCandidatesSearchRoute
  '/auth/login': typeof authRoutesAuthLoginRoute
  '/auth/register': typeof authRoutesAuthRegisterRoute
  '/profile': typeof privateRoutesProfileIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof publicRoutesIndexRoute
  '/candidates-search': typeof privateRoutesCandidatesSearchRoute
  '/auth/login': typeof authRoutesAuthLoginRoute
  '/auth/register': typeof authRoutesAuthRegisterRoute
  '/profile': typeof privateRoutesProfileIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(private-routes)': typeof privateRoutesRouteRouteWithChildren
  '/(public-routes)': typeof publicRoutesRouteRouteWithChildren
  '/(private-routes)/candidates-search': typeof privateRoutesCandidatesSearchRoute
  '/(public-routes)/': typeof publicRoutesIndexRoute
  '/(auth-routes)/auth/login': typeof authRoutesAuthLoginRoute
  '/(auth-routes)/auth/register': typeof authRoutesAuthRegisterRoute
  '/(private-routes)/profile/': typeof privateRoutesProfileIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/candidates-search'
    | '/auth/login'
    | '/auth/register'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/candidates-search' | '/auth/login' | '/auth/register' | '/profile'
  id:
    | '__root__'
    | '/(private-routes)'
    | '/(public-routes)'
    | '/(private-routes)/candidates-search'
    | '/(public-routes)/'
    | '/(auth-routes)/auth/login'
    | '/(auth-routes)/auth/register'
    | '/(private-routes)/profile/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  privateRoutesRouteRoute: typeof privateRoutesRouteRouteWithChildren
  publicRoutesRouteRoute: typeof publicRoutesRouteRouteWithChildren
  authRoutesAuthLoginRoute: typeof authRoutesAuthLoginRoute
  authRoutesAuthRegisterRoute: typeof authRoutesAuthRegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public-routes)': {
      id: '/(public-routes)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRoutesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private-routes)': {
      id: '/(private-routes)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof privateRoutesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public-routes)/': {
      id: '/(public-routes)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRoutesIndexRouteImport
      parentRoute: typeof publicRoutesRouteRoute
    }
    '/(private-routes)/candidates-search': {
      id: '/(private-routes)/candidates-search'
      path: '/candidates-search'
      fullPath: '/candidates-search'
      preLoaderRoute: typeof privateRoutesCandidatesSearchRouteImport
      parentRoute: typeof privateRoutesRouteRoute
    }
    '/(private-routes)/profile/': {
      id: '/(private-routes)/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof privateRoutesProfileIndexRouteImport
      parentRoute: typeof privateRoutesRouteRoute
    }
    '/(auth-routes)/auth/register': {
      id: '/(auth-routes)/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof authRoutesAuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth-routes)/auth/login': {
      id: '/(auth-routes)/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof authRoutesAuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface privateRoutesRouteRouteChildren {
  privateRoutesCandidatesSearchRoute: typeof privateRoutesCandidatesSearchRoute
  privateRoutesProfileIndexRoute: typeof privateRoutesProfileIndexRoute
}

const privateRoutesRouteRouteChildren: privateRoutesRouteRouteChildren = {
  privateRoutesCandidatesSearchRoute: privateRoutesCandidatesSearchRoute,
  privateRoutesProfileIndexRoute: privateRoutesProfileIndexRoute,
}

const privateRoutesRouteRouteWithChildren =
  privateRoutesRouteRoute._addFileChildren(privateRoutesRouteRouteChildren)

interface publicRoutesRouteRouteChildren {
  publicRoutesIndexRoute: typeof publicRoutesIndexRoute
}

const publicRoutesRouteRouteChildren: publicRoutesRouteRouteChildren = {
  publicRoutesIndexRoute: publicRoutesIndexRoute,
}

const publicRoutesRouteRouteWithChildren =
  publicRoutesRouteRoute._addFileChildren(publicRoutesRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  privateRoutesRouteRoute: privateRoutesRouteRouteWithChildren,
  publicRoutesRouteRoute: publicRoutesRouteRouteWithChildren,
  authRoutesAuthLoginRoute: authRoutesAuthLoginRoute,
  authRoutesAuthRegisterRoute: authRoutesAuthRegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
